0, 0, 0, 1 - 0.2, 0.10, 0.10,
0, 0, 0, 0, 1 - 0.20, 0.20,
0, 0, 0, 0, 0, 1
)
# --- 4. Modelos y Ejecución ---
mod_no <- define_strategy(
transition = tmat_no_interv,
healthy = define_state(cost = 0, utility = param$u_healthy),
CIN1 = state_CIN1, CIN23 = state_CIN23, cancer_early = state_cancer_early, cancer_adv = state_cancer_adv, dead = state_dead
)
mod_interv <- define_strategy(
transition = tmat_interv,
# Costo de Cita + Pruebas SÓLO en el Ciclo 1 (usando model_time)
healthy = define_state(
cost = if_then_else(
model_time == 1,
param$cost_cita + param$cost_cito + param$cost_vph,
0
),
utility = param$u_healthy
),
CIN1 = state_CIN1, CIN23 = state_CIN23, cancer_early = state_cancer_early, cancer_adv = state_cancer_adv, dead = state_dead
)
# --- 5. Correr el modelo determinístico (50 años) ---
res_det <- run_model(
mod_no, mod_interv,
parameters = param,
cycles = 50,
init = c(healthy = 1, CIN1 = 0, CIN23 = 0, cancer_early = 0, cancer_adv = 0, dead = 0),
method = "half cycle"
)
library(heemod)
# --- 1. Parámetros base (Entradas para el modelo) ---
# REEMPLAZA ESTOS VALORES CON TUS DATOS REALES DE LA TESIS
param <- define_parameters(
# Costos (Tus datos)
cost_cita = 52000,
cost_cito = 41600,
cost_vph = 70000,
cost_treat_CIN = 5000000,
cost_cancer_early = 12238597,
cost_cancer_adv  = 15000000,
# Utilidades (AVACs)
u_healthy = 1,
u_CIN = 0.95,
u_cancer_early = 0.7,
u_cancer_adv = 0.4,
qaly_discount = 0.03,
cost_discount = 0.03
)
# --- 2. Variables de Probabilidad (Pre-cálculo) ---
# Tasas de Salida Comunes (Literatura)
p_h_cin1 = 0.05
p_h_c23 = 0.01
p_mort_base = 0.005
p_c1_h = 0.03
p_c1_c23 = 0.08
p_c1_mort = 0.01
p_c23_h = 0.01
p_c23_mort = 0.015
p_ce_ca = 0.10
p_ce_mort = 0.10
p_ca_mort = 0.20
# Tasas de Intervención (La clave del modelo)
p_c23_cancer_no = 0.05 # CIN23 -> Cáncer (SIN intervención)
p_c23_cancer_int = 0.005 # CIN23 -> Cáncer (CON intervención, REDUCIDO)
p_c23_curacion_int = 0.40 # CIN23 -> Healthy (CON intervención, AUMENTADO)
# --- 3. Probabilidades de Permanencia (La Diagonal) ---
p_stay_h = 1 - (p_h_cin1 + p_h_c23 + p_mort_base)
p_stay_c1 = 1 - (p_c1_h + p_c1_c23 + p_c1_mort)
# Permanencia CIN23 SIN intervención
p_stay_c23_no = 1 - (p_c23_h + p_c23_cancer_no + p_c23_mort)
# Permanencia CIN23 CON intervención
p_stay_c23_int = 1 - (p_c23_curacion_int + p_c23_cancer_int + p_c23_mort)
p_stay_ce = 1 - (p_ce_ca + p_ce_mort)
p_stay_ca = 1 - p_ca_mort
# --- 4. Definición de Estados y Matrices de Transición (El FIX) ---
# 4.1 Estados Markov
state_CIN1 <- define_state(cost = 100000, utility = param$u_CIN)
state_CIN23 <- define_state(cost = 200000, utility = param$u_CIN)
state_cancer_early <- define_state(cost = param$cost_cancer_early, utility = param$u_cancer_early)
state_cancer_adv  <- define_state(cost = param$cost_cancer_adv,  utility = param$u_cancer_adv)
state_dead <- define_state(cost = 0, utility = 0)
# 4.2 MATRIZ DE CONTROL (NO TAMIZACIÓN) - Usando matrix()
# El orden es por COLUMNA (la convención de R)
mat_no <- matrix(
c(
# healthy
p_stay_h, 0.03, 0.01, 0, 0, 0,
# CIN1
p_h_cin1, p_stay_c1, 0, 0, 0, 0,
# CIN23
p_h_c23, p_c1_c23, p_stay_c23_no, 0, 0, 0,
# cancer_early
0, 0, p_c23_cancer_no, p_stay_ce, 0, 0,
# cancer_adv
0, 0, 0, p_ce_ca, p_stay_ca, 0,
# dead (Absorbente)
p_mort_base, p_c1_mort, p_c23_mort, p_ce_mort, p_ca_mort, 1
),
nrow = 6, ncol = 6, byrow = FALSE,
dimnames = list(c("healthy", "CIN1", "CIN23", "cancer_early", "cancer_adv", "dead"),
c("healthy", "CIN1", "CIN23", "cancer_early", "cancer_adv", "dead"))
)
# 4.3 MATRIZ DE INTERVENCIÓN (TAMIZACIÓN) - Usando matrix()
mat_int <- matrix(
c(
# healthy
p_stay_h, 0.03, p_c23_curacion_int, 0, 0, 0, # Fila clave de curación
# CIN1
p_h_cin1, p_stay_c1, 0, 0, 0, 0,
# CIN23
p_h_c23, p_c1_c23, p_stay_c23_int, 0, 0, 0, # Fila clave de permanencia
# cancer_early
0, 0, p_c23_cancer_int, p_stay_ce, 0, 0, # Fila clave de progresión reducida
# cancer_adv
0, 0, 0, p_ce_ca, p_stay_ca, 0,
# dead (Absorbente)
p_mort_base, p_c1_mort, p_c23_mort, p_ce_mort, p_ca_mort, 1
),
nrow = 6, ncol = 6, byrow = FALSE,
dimnames = list(c("healthy", "CIN1", "CIN23", "cancer_early", "cancer_adv", "dead"),
c("healthy", "CIN1", "CIN23", "cancer_early", "cancer_adv", "dead"))
)
# Convertir las matrices base a objetos de transición de heemod
tmat_no_interv <- define_transition(mat_no)
tmat_interv <- define_transition(mat_int)
# --- 5.1 Modelo NO TAMIZACIÓN (Control) ---
mod_no <- define_strategy(
transition = tmat_no_interv,
healthy = define_state(cost = 0, utility = param$u_healthy),
CIN1 = state_CIN1, CIN23 = state_CIN23, cancer_early = state_cancer_early, cancer_adv = state_cancer_adv, dead = state_dead
)
# --- 1. Parámetros base ---
param <- define_parameters(
cost_cita = 52000, cost_cito = 41600, cost_vph = 70000,
cost_treat_CIN = 5000000, cost_cancer_early = 12238597, cost_cancer_adv  = 15000000,
u_healthy = 1, u_CIN = 0.95, u_cancer_early = 0.7, u_cancer_adv = 0.4,
qaly_discount = 0.03, cost_discount = 0.03
)
# --- 2. Variables de Probabilidad (Pre-cálculo) ---
p_h_cin1 = 0.05
p_h_c23 = 0.01
p_mort_base = 0.005
p_c1_h = 0.03
p_c1_c23 = 0.08
p_c1_mort = 0.01
p_c23_h = 0.01
p_c23_mort = 0.015
p_ce_ca = 0.10
p_ce_mort = 0.10
p_ca_mort = 0.20
p_c23_cancer_no = 0.05
p_c23_cancer_int = 0.005
p_c23_curacion_int = 0.40
p_stay_h = 1 - (p_h_cin1 + p_h_c23 + p_mort_base)
p_stay_c1 = 1 - (p_c1_h + p_c1_c23 + p_c1_mort)
p_stay_c23_no = 1 - (p_c23_h + p_c23_cancer_no + p_c23_mort)
p_stay_c23_int = 1 - (p_c23_curacion_int + p_c23_cancer_int + p_c23_mort)
p_stay_ce = 1 - (p_ce_ca + p_ce_mort)
p_stay_ca = 1 - p_ca_mort
# --- 3. Definición de Estados y Matrices de Transición ---
state_names <- c("healthy", "CIN1", "CIN23", "cancer_early", "cancer_adv", "dead")
state_CIN1 <- define_state(cost = 100000, utility = param$u_CIN)
state_CIN23 <- define_state(cost = 200000, utility = param$u_CIN)
state_cancer_early <- define_state(cost = param$cost_cancer_early, utility = param$u_cancer_early)
state_cancer_adv  <- define_state(cost = param$cost_cancer_adv,  utility = param$u_cancer_adv)
state_dead <- define_state(cost = 0, utility = 0)
# 3.1 MATRIZ DE CONTROL (NO TAMIZACIÓN)
mat_no <- matrix(
c(
p_stay_h, 0.03, 0.01, 0, 0, 0,
p_h_cin1, p_stay_c1, 0, 0, 0, 0,
p_h_c23, p_c1_c23, p_stay_c23_no, 0, 0, 0,
0, 0, p_c23_cancer_no, p_stay_ce, 0, 0,
0, 0, 0, p_ce_ca, p_stay_ca, 0,
p_mort_base, p_c1_mort, p_c23_mort, p_ce_mort, p_ca_mort, 1
),
nrow = 6, ncol = 6, byrow = FALSE # La convención de R es por COLUMNA
)
# 3.2 MATRIZ DE INTERVENCIÓN (TAMIZACIÓN)
mat_int <- matrix(
c(
p_stay_h, 0.03, p_c23_curacion_int, 0, 0, 0, # Curación
p_h_cin1, p_stay_c1, 0, 0, 0, 0,
p_h_c23, p_c1_c23, p_stay_c23_int, 0, 0, 0, # Permanencia
0, 0, p_c23_cancer_int, p_stay_ce, 0, 0, # Progresión Reducida
0, 0, 0, p_ce_ca, p_stay_ca, 0,
p_mort_base, p_c1_mort, p_c23_mort, p_ce_mort, p_ca_mort, 1
),
nrow = 6, ncol = 6, byrow = FALSE
)
# --- 4. Definición de Estrategias y Ejecución ---
# El FIX: Pasar los state_names explícitamente
tmat_no_interv <- define_transition(mat_no, state_names = state_names)
library(heemod)
# --- 1. Parámetros base (Entradas para el modelo) ---
param <- define_parameters(
cost_cita = 52000, cost_cito = 41600, cost_vph = 70000,
cost_treat_CIN = 5000000, cost_cancer_early = 12238597, cost_cancer_adv  = 15000000,
u_healthy = 1, u_CIN = 0.95, u_cancer_early = 0.7, u_cancer_adv = 0.4,
qaly_discount = 0.03, cost_discount = 0.03
)
# --- 2. Variables de Probabilidad (Pre-cálculo) ---
# Estados
state_names <- c("healthy", "CIN1", "CIN23", "cancer_early", "cancer_adv", "dead")
# Tasas de Salida Comunes (Literatura)
p_h_cin1 = 0.05
p_h_c23 = 0.01
p_mort_base = 0.005
p_c1_h = 0.03
p_c1_c23 = 0.08
p_c1_mort = 0.01
p_c23_h = 0.01
p_c23_mort = 0.015
p_ce_ca = 0.10
p_ce_mort = 0.10
p_ca_mort = 0.20
# Tasas de Intervención (La clave del modelo)
p_c23_cancer_no = 0.05
p_c23_cancer_int = 0.005
p_c23_curacion_int = 0.40
# Probabilidades de Permanencia (La Diagonal)
p_stay_h = 1 - (p_h_cin1 + p_h_c23 + p_mort_base)
p_stay_c1 = 1 - (p_c1_h + p_c1_c23 + p_c1_mort)
p_stay_c23_no = 1 - (p_c23_h + p_c23_cancer_no + p_c23_mort)
p_stay_c23_int = 1 - (p_c23_curacion_int + p_c23_cancer_int + p_c23_mort)
p_stay_ce = 1 - (p_ce_ca + p_ce_mort)
p_stay_ca = 1 - p_ca_mort
# --- 3. Definición de Estados y MATRICES CON data.frame() ---
# 3.1 Estados Markov
state_CIN1 <- define_state(cost = 100000, utility = param$u_CIN)
state_CIN23 <- define_state(cost = 200000, utility = param$u_CIN)
state_cancer_early <- define_state(cost = param$cost_cancer_early, utility = param$u_cancer_early)
state_cancer_adv  <- define_state(cost = param$cost_cancer_adv,  utility = param$u_cancer_adv)
state_dead <- define_state(cost = 0, utility = 0)
# 3.2 MATRIZ DE CONTROL (NO TAMIZACIÓN)
mat_no_df <- data.frame(
# healthy
p_stay_h, p_h_cin1, p_h_c23, 0, 0, p_mort_base,
# CIN1
p_c1_h, p_stay_c1, p_c1_c23, 0, 0, p_c1_mort,
# CIN23
p_c23_h, 0, p_stay_c23_no, p_c23_cancer_no, 0, p_c23_mort,
# cancer_early
0, 0, 0, p_stay_ce, p_ce_ca, p_ce_mort,
# cancer_adv
0, 0, 0, 0, p_stay_ca, p_ca_mort,
# dead
0, 0, 0, 0, 0, 1
)
# Reordenar por filas para coincidir con define_transition (y heemod)
mat_no <- matrix(t(mat_no_df), nrow = 6, ncol = 6, byrow = TRUE, dimnames = list(state_names, state_names))
# 3.3 MATRIZ DE INTERVENCIÓN (TAMIZACIÓN)
mat_int_df <- data.frame(
# healthy
p_stay_h, p_h_cin1, p_h_c23, 0, 0, p_mort_base,
# CIN1
p_c1_h, p_stay_c1, p_c1_c23, 0, 0, p_c1_mort,
# CIN23 (MODIFICADA)
p_c23_curacion_int, 0, p_stay_c23_int, p_c23_cancer_int, 0, p_c23_mort,
# cancer_early
0, 0, 0, p_stay_ce, p_ce_ca, p_ce_mort,
# cancer_adv
0, 0, 0, p_ce_ca, p_stay_ca, 0,
# dead
0, 0, 0, 0, 0, 1
)
mat_int <- matrix(t(mat_int_df), nrow = 6, ncol = 6, byrow = TRUE, dimnames = list(state_names, state_names))
# --- 4. Definición de Estrategias y Ejecución ---
# Ahora, define_transition recibe una matriz de 6x6 válida
tmat_no_interv <- define_transition(mat_no)
tmat_interv <- define_transition(mat_int)
mod_no <- define_strategy(
transition = tmat_no_interv,
healthy = define_state(cost = 0, utility = param$u_healthy),
CIN1 = state_CIN1, CIN23 = state_CIN23, cancer_early = state_cancer_early, cancer_adv = state_cancer_adv, dead = state_dead
)
setwd("~/Espacial/Estadística Espacial")
# Chunk 1
#Librerias necesarias
library(dplyr)
library(geoR)
library(sp)
library(readxl)
library(tidyr)
library(sf)
library(ggplot2)
library(knitr)
library(plotly)
library(leaflet)
library(raster)
library(stars)
#Carga de datos
Cali_Marz <- read.csv("AirNow_Marzo_California.csv", colClasses = c("AQSID"="character"))
Ozone <- Cali_Marz %>% filter(Variable=="OZONE")
NO2 <- Cali_Marz %>% filter(Variable=="NO2")
Temp <- read.csv("Temperatura.csv", colClasses = c("AQSID"="character"))
Ozone <- Ozone %>% mutate(DateTime = paste(Date, Hour, sep = " "))
NO2 <- NO2 %>% mutate(DateTime = paste(Date, Hour, sep = " "))
Temp <- Temp[,-1]
#Para el mapa de California
sh_mundos<-st_read("admin00.shp",quiet=TRUE)
sh_mundos <- sh_mundos %>% filter(CNTRY_NAME=="United States")
sh_mundos <- sh_mundos %>% filter(ADMIN_NAME=="California")
#Datos de las estaciones
data <- read.csv("HourlyAQObs_2024010101.dat")
data <- data %>% filter(CountryCode=="US")
data <- data %>% filter(StateName=="CA")
CRS_UTM_NY = "+init=epsg:3310"
Ozone_Matrix <- Ozone %>%
dplyr::select(DateTime, AQSID, Value) %>%
pivot_wider(names_from = AQSID, values_from = Value)
Temp_Matrix <- Temp %>%
dplyr::select(DateTime, AQSID, Value) %>%
pivot_wider(names_from = AQSID, values_from = Value)
#Para el mapa
sh_mundos_wgs84 <- st_transform(sh_mundos, crs = 4326)
sh_mundos_utm <- st_transform(sh_mundos, crs = CRS("EPSG:3310"))
new <- sp::spsample(as(sh_mundos_utm, "Spatial"), n = 50000, type = "regular")
proj4string(new) <- CRS("EPSG:3310")
coordinates(new) ~ Este + Norte
colnames(new@coords) <- c("Este", "Norte")
sh_mundos_sp_utm <- as(sh_mundos_utm, "Spatial")
sh_mundos_utm_simple <- st_union(sh_mundos_utm)
sh_mundos_sp_utm_simple <- as(sh_mundos_utm_simple, "Spatial")
# Chunk 2
EstacionesOz <- data %>% filter(AQSID %in% colnames(Ozone_Matrix)[-1])
EstacionesOz <- EstacionesOz[,c(1:10,13)]
est_sf_Oz <- st_as_sf(EstacionesOz,
coords = c("Longitude", "Latitude"),
crs = 4326)
est_sf_utm_O <- st_transform(est_sf_Oz, crs = 3310)
deci_coord_O = SpatialPoints(cbind(EstacionesOz$Longitude,
EstacionesOz$Latitude),
proj4string = CRS("+proj=longlat"))
utm_coord_O = spTransform(deci_coord_O, CRS("EPSG:3310"))
utm_coord_df_O = as.data.frame(utm_coord_O)
EstacionesOz$x <- utm_coord_df_O$coords.x1
EstacionesOz$y <- utm_coord_df_O$coords.x2
y_oz <- Ozone_Matrix[1,] #Tomar una fecha
y_oz <- cbind(colnames(y_oz),t(y_oz[1,]))
y_oz <- y_oz[-1,]
y_oz <- as.data.frame(y_oz)
y_oz <- na.omit(y_oz)
y_oz <- inner_join(y_oz, EstacionesOz, by=c("V1"="AQSID"))
datosOZ <- y_oz[,c(13,14,2)] #Datos1 es la base con coordenadas + variable
colnames(datosOZ)=c("Este","Norte","Ozono")
datosOZ$Ozono <- as.numeric(datosOZ$Ozono)
coords_3310O <- st_coordinates(est_sf_utm_O)
est_sf_utm_O$Este <- coords_3310O[, "X"]
est_sf_utm_O$Norte <- coords_3310O[, "Y"]
datosO_sf_utm <- merge(est_sf_utm_O, y_oz[, c("V1", "V2")], by.x = "AQSID", by.y = "V1")
datosO_sf_utm$Ozono <- as.numeric(datosO_sf_utm$V2)
datosO_sf_wgs84 <- merge(est_sf_Oz, y_oz[, c("V1", "V2")], by.x = "AQSID", by.y = "V1")
datosO_sf_wgs84$Ozono <- as.numeric(datosO_sf_wgs84$V2)
palO <- colorNumeric(palette = "viridis", domain = datosO_sf_wgs84$Ozono)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
# Contorno de California
addPolygons(data = sh_mundos_wgs84, fill = FALSE, color = "black", weight = 2) %>%
# Puntos de temperatura
addCircleMarkers(data = datosO_sf_wgs84,
fillColor = ~palO(Ozono),
fillOpacity = 0.8,
color = "black",
weight = 1,
radius = 6,
popup = ~paste("Ozono:", Ozono, "°C")) %>%
addLegend(pal = palO, values = datosO_sf_wgs84$Ozono, title = "Ozono (ppb)")
ozone <- as.geodata(datosOZ)
summary(ozone)
# Chunk 3
par(mfrow=c(1,2))
plot(Ozono~Este, data = datosOZ, ylab = "Ozono", xlab="Este")
plot(Ozono~Norte, data = datosOZ, ylab = "Ozono", xlab="Norte")
# Chunk 4
plot(ozone, qt.col = c("purple",
"pink",
"green",
"yellow"),
scatter3d=T)
# Chunk 5
fitO <- lm(Ozono~I(Norte^2)+I(Norte^3)+Este, data = datosOZ)
summary(fitO)
# Chunk 6
datosOZ$Residuos <- fitO$residuals
par(mfrow=c(1,2))
plot(Residuos~Este, data = datosOZ, xlab="Este", ylab="Residuos")
plot(Residuos~Norte, data = datosOZ, xlab="Norte", ylab="Residuos")
vg_O <- variog(ozone,estimator.type = "modulus", pairs.min=50) #Sin tendencia espacial
vg1_O <- variog(ozone, trend = ~I(Norte^2)+I(Norte^3)+Este, estimator.type = "modulus", pairs.min=50)
par(mfrow=c(1,1))
plot(vg1_O)
vg1_O <- variog(ozone, trend = ~I(Norte^2)+I(Norte^3)+Este, estimator.type = "modulus", pairs.min=50, max.dist = 6e5)
plot(vg1_O)
vg1_O <- variog(ozone, trend = ~I(Norte^2)+I(Norte^3)+Este, estimator.type = "modulus", pairs.min=50, max.dist = 5e5)
plot(vg1_O)
vg1_O <- variog(ozone, trend = ~I(Norte^2)+I(Norte^3)+Este, estimator.type = "modulus", pairs.min=50, max.dist = 7e5)
plot(vg1_O)
vg1_O <- variog(ozone, trend = ~I(Norte^2)+I(Norte^3)+Este, estimator.type = "modulus", pairs.min=50, max.dist = 6e5)
plot(vg1_O)
vg1_O <- variog(ozone, trend = ~I(Norte^2)+I(Norte^3)+Este, estimator.type = "modulus", pairs.min=50, max.dist = 7e5)
plot(vg1_O)
eyefit(vg1_O)
ozone
summary(zone)
summary(ozone)
datosOZ
median(datosOZ$Norte)
which([datosOZ$Norte>=median(datosOZ$Norte)])
which(datosOZ$Norte>=median(datosOZ$Norte))
datosOZ_sup <- datosOZ[which(datosOZ$Norte>=median(datosOZ$Norte)),]
View(datosOZ_sup)
datosOZ_sup<-datosOZ_sup[,-4]
datosOZ_inf <- datosOZ[which(datosOZ$Norte<median(datosOZ$Norte)),]
datosOZ_inf<-datosOZ_inf[,-4]
oz_sup<-as.geodata(datosOZ_sup)
summary(oz_sup)
variog(oz_sup)
plot(variog(oz_sup))
plot(oz_sup)
summary(lm(Ozono~Este+Norte, data=datosOZ_sup))
summary(lm(Ozono~Este*Norte, data=datosOZ_sup))
summary(lm(Ozono~Este+Este*Norte-Norte, data=datosOZ_sup))
summary(lm(Ozono~poly(Norte,2), data=datosOZ_sup))
summary(lm(Ozono~poly(Norte,2)+poly(Este,2), data=datosOZ_sup))
summary(lm(Ozono~I(Norte^2)+I(Este^2) data=datosOZ_sup))
summary(lm(Ozono~I(Norte^2)+I(Este^2), data=datosOZ_sup))
summary(lm(Ozono~I(Norte^2)+Este*Norte, data=datosOZ_sup))
summary(lm(Ozono~I(Norte^2)+Este*Norte-Norte-Este, data=datosOZ_sup))
summary(lm(Ozono~poly(Norte,2)*poly(Este,2), data=datosOZ_sup))
summary(lm(Ozono~I(Norte^2), data=datosOZ_sup))
plot(oz_sup, trend=~I(Norte^2))
plot(variog(oz_sup, trend=~I(Norte^2)))
simple_scatter_plot <- function(datos, variable1, variable2) {
plot1 <- ggplot(as.data.frame(datos),
aes_string(x = variable1, y = variable2,
color = as.factor(1))) +
geom_point() +
scale_colour_viridis_d() +
labs(
x = variable1,
y = variable2
) +
theme_light() +
theme(legend.position = "none")
return(plot1)
}
simple_scatter_plot(datosOZ, "Este", "Ozono")
simple_scatter_plot <- function(datos, variable1, variable2) {
plot1 <- ggplot(as.data.frame(datos),
aes(x = variable1, y = variable2,
color = as.factor(1))) +
geom_point() +
scale_colour_viridis_d() +
labs(
x = variable1,
y = variable2
) +
theme_light() +
theme(legend.position = "none")
return(plot1)
}
simple_scatter_plot(datosOZ, "Este", "Ozono")
simple_scatter_plot <- function(datos, variable1, variable2) {
plot1 <- ggplot(as.data.frame(datos),
annotate(x = variable1, y = variable2,
color = as.factor(1))) +
geom_point() +
scale_colour_viridis_d() +
labs(
x = variable1,
y = variable2
) +
theme_light() +
theme(legend.position = "none")
return(plot1)
}
simple_scatter_plot(datosOZ, "Este", "Ozono")
simple_scatter_plot <- function(datos, variable1, variable2) {
plot1 <- ggplot(as.data.frame(datos),
aes(x = .data[[variable1]], y = .data[[variable2]],
color = as.factor(1))) +
geom_point() +
scale_colour_viridis_d() +
labs(
x = variable1,
y = variable2
) +
theme_light() +
theme(legend.position = "none")
return(plot1)
}
simple_scatter_plot(datosOZ, "Este", "Ozono")
simple_scatter_plot(datosOZ, "Este", "Ozono")
simple_scatter_plot(datosOZ, "Norte", "Ozono")
cowplot::plot_grid(pO1,pO2)
pO1 <- simple_scatter_plot(datosOZ, "Este", "Ozono")
pO2 <- simple_scatter_plot(datosOZ, "Norte", "Ozono")
cowplot::plot_grid(pO1,pO2)
pO1 <- simple_scatter_plot(datosOZ, "Este", "Residuos")
pO2 <- simple_scatter_plot(datosOZ, "Norte", "Residuos")
cowplot::plot_grid(pO1,pO2)
pT1 <- simple_scatter_plot(datosOZ, "Este", "Temperatura")
pT2 <- simple_scatter_plot(datosOZ, "Norte", "Temperatura")
cowplot::plot_grid(pT1,pT2)
pT1 <- simple_scatter_plot(datosT, "Este", "Temperatura")
pT2 <- simple_scatter_plot(datosT, "Norte", "Temperatura")
pander::pander(summary(fitO))
pander::pander(summary(ozone))
pander::pander(summary(ozone))
