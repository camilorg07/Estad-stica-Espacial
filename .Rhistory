vgmws <- vgm(psill = mat1[2, 2],
model = "Sph",
range = 2e5,
nugget = .5,
add.to = vgm(psill = mat2[2, 2],
model = "Hol",
range = .5e5, nugget = 2))
vgmntemp_sv <- vgm(psill = mat1[1, 2], model = "Sph",
range = 2e5,
nugget = .5,
add.to = vgm(psill = mat2[1, 2],
model = "Hol",
range = .5e5, nugget = 2))
g <- gstat(NULL, id="Temp", formula=Temperatura~Norte+I(Norte^2),
data=datosT1, model = vgmntemp)
g <- gstat(g, id="W_speed", formula=WindSpeed~Norte*Este,
data=datosWS1, model = vgmws)
g <- gstat(g, c("Temp","W_speed"), model = vgmntemp_sv)
plot(variogram(g),
model = g$model,
pl = F,
xlab = "Distancias",
ylab = "Semivarianza")
library(MASS)
library(ggplot2)
X <- seq(0,7,len = 1)
Y <- seq(1,7,len = 1)
grid <- expand.grid(X,Y)
View(grid)
X <- seq(0,7,len = 100)
Y <- seq(1,7,len = 100)
grid <- expand.grid(X,Y)
X <- seq(0,7,len = 100)
Y <- seq(1,7,len = 10)
grid <- expand.grid(X,Y)
dist <- as.matrix(dist(grid))
sigma <- 50
??mtvnorm
??rMVnorm
max(dist)
cov.spatial(dist, cov.model = "gaussian", cov.pars = c(50, max(dist)))
Sigma<-cov.spatial(dist, cov.model = "gaussian", cov.pars = c(50, max(dist)))
sim <- mvtnorm::rmvnorm(nrow(grid), mean = 0, sigma = Sigma)
n <- nrow(grid)
sim <- mvtnorm::rmvnorm(n, mean = rep(0,n) , sigma = Sigma)
View(sim)
n
View(Sigma)
dim(Sigma)
View(Sigma)
View(sim)
sim <- mvtnorm::rmvnorm(1, mean = rep(0,n) , sigma = Sigma)
View(sim)
Sigma1<-cov.spatial(dist, cov.model = "gaussian", cov.pars = c(10, max(dist)))
Sigma2<-cov.spatial(dist, cov.model = "gaussian", cov.pars = c(3, max(dist)))
sim2 <- mvtnorm::rmvnorm(1, mean = rep(0,n) , sigma = Sigma1)
sim3 <- mvtnorm::rmvnorm(1, mean = rep(0,n) , sigma = Sigma2)
hist(sim1)
hist(sim)
hist(sim2)
hist(sim3)
var(sim3)
(sim3)
summary(sim3)
summary(t(sim3))
sqrt(1000)
X <- seq(0,7,len = 32)
Y <- seq(0,7,len = 32)
grid <- expand.grid(X,Y)
length(grid)
ncol(grid)
nrow(grid)
grid <- grid[sample(1:nrow(grid), 1000)]
grid <- grid[sample(1:nrow(grid), 1000),]
dist <- as.matrix(dist(grid))
sigma <- 50
Sigma<-cov.spatial(dist, cov.model = "gaussian", cov.pars = c(50, max(dist)))
Sigma1<-cov.spatial(dist, cov.model = "gaussian", cov.pars = c(10, max(dist)))
Sigma2<-cov.spatial(dist, cov.model = "gaussian", cov.pars = c(3, max(dist)))
n <- nrow(grid)
sim <- mvtnorm::rmvnorm(1, mean = rep(0,n) , sigma = Sigma)
sim2 <- mvtnorm::rmvnorm(1, mean = rep(0,n) , sigma = Sigma1)
sim3 <- mvtnorm::rmvnorm(1, mean = rep(0,n) , sigma = Sigma2)
summary(t(sim3))
summary(t(sim))
sqrt(50)
var(t(sim))
a<-as.geodata(data.frame(X=grid$Var1, Y=grid$Var2, Z = sim), coords.col = c(1,2))
a
data.frame(X=grid$Var1, Y=grid$Var2, Z = sim)
sim
a<-as.geodata(data.frame(X=grid$Var1, Y=grid$Var2, Z = t(sim)), coords.col = c(1,2))
a
plot(a)
plot(a, trend ="2nd")
plot(a, trend ="1st")
plot(a, trend ="3rd")
plot(a, trend =~poly(X,3))
plot(a, trend =~poly(X,3)*poly(Y,3))
plot(a, trend ="1st")
plot(a, trend ="2nd")
simm1 <- grf(1000, grid = grid, cov.pars = c(50, max(dist)))
simm1 <- grf(1000, grid = grid, cov.pars = c(50, max(dist)), cov.model = "gaussian")
View(simm1)
simm1
plot(simm1)
simm1 <- grf(1000, grid = grid, cov.pars = c(50, 5), cov.model = "gaussian")
plot(simm1)
simm1 <- grf(1000, grid = grid, cov.pars = c(50, 1), cov.model = "gaussian")
plot(simm1)
simm1 <- grf(1000, grid = grid, cov.pars = c(50, 0.5), cov.model = "gaussian")
plot(simm1)
simm2 <- grf(1000, grid = grid, cov.pars = c(10, 0.5), cov.model = "gaussian")
plot(simm2)
simm3 <- grf(1000, grid = grid, cov.pars = c(3, 0.5), cov.model = "gaussian")
plot(simm3)
simm1
simm2
simm3$data
return(x_s)}
phi <- function(t, data){
phi_1 <- sqrt(3/2*t)
phi_2 <- sqrt(5)*(3*t^2-1)/(2*sqrt(2))
phi_3 <- (5/2)*sqrt(7/2)*(t^3-3*t/5)
x_s <- data[,1]*phi_1 + data[,2]*phi_2+ data[,3]* phi_3
return(x_s)}
sim <- data.frame(score1 = simm1$data, score2 = simm2$data, score3 = simm3$data)
t <- seq(0,1, by=0.01)
res <- phi(t, sim)
return(x_s)}
phi <- function(t, data){
phi_1 <- sqrt(3/2*t)
phi_2 <- sqrt(5)*(3*t^2-1)/(2*sqrt(2))
phi_3 <- (5/2)*sqrt(7/2)*(t^3-3*t/5)
phi <- c(phi1,phi2, phi_3)
x_s <- rowsum(phi*data)
return(x_s)}
res <- phi(t, sim)
phi <- function(t, data){
phi_1 <- sqrt(3/2*t)
phi_2 <- sqrt(5)*(3*t^2-1)/(2*sqrt(2))
phi_3 <- (5/2)*sqrt(7/2)*(t^3-3*t/5)
phi <- c(phi_1,phi_2, phi_3)
x_s <- rowsum(phi*data)
return(x_s)}
res <- phi(t, sim)
res <- phi(.5, sim)
phi <- function(t){
phi_1 <- sqrt(3/2*t)
phi_2 <- sqrt(5)*(3*t^2-1)/(2*sqrt(2))
phi_3 <- (5/2)*sqrt(7/2)*(t^3-3*t/5)
phi <- c(phi_1,phi_2, phi_3)
return(phi)}
res <- phi(t)
simm1
res
res <- phi(t)*sim
View(res)
phi(1)
res <- sapply(t, phi)
View(res)
res <- t(sapply(t, phi))
View(res)
apply(res, 1, cumsum)
res
sapply(t, phi)
res <- t(sapply(t, phi))*sim
View(res)
res <- t(sapply(t, phi))
View(res)
res <- apply(res, 1, cumsum)
sim %*% res
res
res <- sapply(t, phi)
sim %*% res
str(sim)
as.matrix(sim) %*% res
res <- as.matrix(sim) %*% res
View(res)
datos_func <- as.data.frame(res)
View(datos_func)
datos_func$t <- t
plot(t,datos_func[1,])
plot(t,datos_func[1:1000,])
plot(NA, type = 'l',
main = "Gráfico Funcional (Base R)",
xlab = "Tiempo (t)", ylab = "Valor Funcional",
ylim=c(-10,10))
# 2. Iterar y añadir las series restantes con lines()
for (i in 1:1000){
lines(t, datos_func[i,]) # lines() añade automáticamente al gráfico existente
}
plot(NA, type = 'l',
main = "Gráfico Funcional (Base R)",
xlab = "Tiempo (t)", ylab = "Valor Funcional",
ylim=c(-10,10), xlim=c(0,1))
# 2. Iterar y añadir las series restantes con lines()
for (i in 1:1000){
lines(t, datos_func[i,],
color = i) # lines() añade automáticamente al gráfico existente
lines(t, datos_func[i,],
color = i)} # lines() añade automáticamente al gráfico existente
plot(NA, type = 'l',
main = "Gráfico Funcional (Base R)",
xlab = "Tiempo (t)", ylab = "Valor Funcional",
ylim=c(-10,10), xlim=c(0,1))
# 2. Iterar y añadir las series restantes con lines()
for (i in 1:1000){
lines(t, datos_func[i,],
col = i)} # lines() añade automáticamente al gráfico existente
plot(NA, type = 'l',
main = "Gráfico Funcional (Base R)",
xlab = "Tiempo (t)", ylab = "Valor Funcional",
ylim=c(-20,20), xlim=c(0,1))
# 2. Iterar y añadir las series restantes con lines()
for (i in 1:1000){
lines(t, datos_func[i,],
col = i)} # lines() añade automáticamente al gráfico existente
plot(NA, type = 'l',
main = "Gráfico Funcional (Base R)",
xlab = "Tiempo (t)", ylab = "Valor Funcional",
ylim=c(-30,30), xlim=c(0,1))
# 2. Iterar y añadir las series restantes con lines()
for (i in 1:1000){
lines(t, datos_func[i,],
col = i)} # lines() añade automáticamente al gráfico existente
t <- seq(-1,1, by=0.01)
res <- sapply(t, phi)
return(phi)}
phi <- function(t){
phi_1 <- sqrt(3/2)*t
phi_2 <- sqrt(5)*(3*t^2-1)/(2*sqrt(2))
phi_3 <- (5/2)*sqrt(7/2)*(t^3-3*t/5)
phi <- c(phi_1,phi_2, phi_3)
return(phi)}
t <- seq(-1,1, by=0.01)
res <- sapply(t, phi)
res <- as.matrix(sim) %*% res
datos_func <- as.data.frame(res)
for (i in 1:1000){
plot(t,datos_func[i,], add=T)}
plot(NA, type = 'l',
main = "Gráfico Funcional (Base R)",
xlab = "Tiempo (t)", ylab = "Valor Funcional",
ylim=c(-30,30), xlim=c(0,1))
# 2. Iterar y añadir las series restantes con lines()
for (i in 1:1000){
lines(t, datos_func[i,],
col = i)} # lines() añade automáticamente al gráfico existente
plot(NA, type = 'l',
main = "Gráfico Funcional (Base R)",
xlab = "Tiempo (t)", ylab = "Valor Funcional",
ylim=c(-30,30), xlim=c(-1,1))
# 2. Iterar y añadir las series restantes con lines()
for (i in 1:1000){
lines(t, datos_func[i,],
col = i)} # lines() añade automáticamente al gráfico existente
lines(colMeans(datos_func), col="blue", lwd=3)
expand.grid(X,Y)
grid
matplot(t(datos_func), type = "l", lty = 1, col = "grey",
main = "Gráfico de Funciones con Media",
xlab = "Punto", ylab = "Valor")
lines(colMeans(datos_func), col="blue", lwd=3)
colores_a_usar <- rainbow(ncol(datos_func))
matplot(t(datos_func), type = "l", lty = 1, col = "grey",
main = "Gráfico de Funciones con Media",
xlab = "Punto", ylab = "Valor",
col = colores_a_usar)
matplot(t(datos_func), type = "l", lty = 1,
main = "Gráfico de Funciones con Media",
xlab = "Punto", ylab = "Valor",
col = colores_a_usar)
lines(colMeans(datos_func), col="blue", lwd=3)
plot(NA, type = 'l',
main = "Gráfico Funcional (Base R)",
xlab = "Tiempo (t)", ylab = "Valor Funcional",
ylim=c(-30,30), xlim=c(-1,1))
# 2. Iterar y añadir las series restantes con lines()
for (i in 1:1000){
lines(t, datos_func[i,],
col = i, lwd=.1)} # lines() añade automáticamente al gráfico existente
lines(colMeans(datos_func), col="red", lwd=5)
lines(t,colMeans(datos_func), col="red", lwd=5)
plot(NA, type = 'l',
main = "Gráfico Funcional (Base R)",
xlab = "Tiempo (t)", ylab = "Valor Funcional",
ylim=c(-50,50), xlim=c(-1,1))
# 2. Iterar y añadir las series restantes con lines()
for (i in 1:1000){
lines(t, datos_func[i,],
col = i, lwd=.1)} # lines() añade automáticamente al gráfico existente
lines(t,colMeans(datos_func), col="red", lwd=5)
temp$data
sd(temp$data)/mean(temp$data)
View(sim)
?krige()
?gstat::krige()
setwd("~/Espacial/Estadística Espacial")
# Chunk 1
#Librerias necesarias
library(dplyr)
library(geoR)
library(sp)
library(readxl)
library(tidyr)
library(sf)
library(ggplot2)
library(knitr)
library(plotly)
library(leaflet)
library(raster)
library(stars)
#Carga de datos
Cali_Marz <- read.csv("AirNow_Marzo_California.csv", colClasses = c("AQSID"="character"))
Ozone <- Cali_Marz %>% filter(Variable=="OZONE")
NO2 <- Cali_Marz %>% filter(Variable=="NO2")
Temp <- read.csv("Temperatura.csv", colClasses = c("AQSID"="character"))
Ozone <- Ozone %>% mutate(DateTime = paste(Date, Hour, sep = " "))
NO2 <- NO2 %>% mutate(DateTime = paste(Date, Hour, sep = " "))
Temp <- Temp[,-1]
#Para el mapa de California
sh_mundos<-st_read("admin00.shp",quiet=TRUE)
sh_mundos <- sh_mundos %>% filter(CNTRY_NAME=="United States")
sh_mundos <- sh_mundos %>% filter(ADMIN_NAME=="California")
#Datos de las estaciones
data <- read.csv("HourlyAQObs_2024010101.dat")
data <- data %>% filter(CountryCode=="US")
data <- data %>% filter(StateName=="CA")
CRS_UTM_NY = "+init=epsg:3310"
Ozone_Matrix <- Ozone %>%
dplyr::select(DateTime, AQSID, Value) %>%
pivot_wider(names_from = AQSID, values_from = Value)
Temp_Matrix <- Temp %>%
dplyr::select(DateTime, AQSID, Value) %>%
pivot_wider(names_from = AQSID, values_from = Value)
#Para el mapa
sh_mundos_wgs84 <- st_transform(sh_mundos, crs = 4326)
# Chunk 2
EstacionesOz <- data %>% filter(AQSID %in% colnames(Ozone_Matrix)[-1])
EstacionesOz <- EstacionesOz[,c(1:10,13)]
est_sf_Oz <- st_as_sf(EstacionesOz,
coords = c("Longitude", "Latitude"),
crs = 4326)
est_sf_utm_O <- st_transform(est_sf_Oz, crs = 3310)
deci_coord_O = SpatialPoints(cbind(EstacionesOz$Longitude,
EstacionesOz$Latitude),
proj4string = CRS("+proj=longlat"))
utm_coord_O = spTransform(deci_coord_O, CRS("EPSG:3310"))
utm_coord_df_O = as.data.frame(utm_coord_O)
EstacionesOz$x <- utm_coord_df_O$coords.x1
EstacionesOz$y <- utm_coord_df_O$coords.x2
y_oz <- Ozone_Matrix[1,] #Tomar una fecha
y_oz <- cbind(colnames(y_oz),t(y_oz[1,]))
y_oz <- y_oz[-1,]
y_oz <- as.data.frame(y_oz)
y_oz <- na.omit(y_oz)
y_oz <- inner_join(y_oz, EstacionesOz, by=c("V1"="AQSID"))
datosOZ <- y_oz[,c(13,14,2)] #Datos1 es la base con coordenadas + variable
colnames(datosOZ)=c("Este","Norte","Ozono")
datosOZ$Ozono <- as.numeric(datosOZ$Ozono)
coords_3310O <- st_coordinates(est_sf_utm_O)
est_sf_utm_O$Este <- coords_3310O[, "X"]
est_sf_utm_O$Norte <- coords_3310O[, "Y"]
datosO_sf_utm <- merge(est_sf_utm_O, y_oz[, c("V1", "V2")], by.x = "AQSID", by.y = "V1")
datosO_sf_utm$Ozono <- as.numeric(datosO_sf_utm$V2)
datosO_sf_wgs84 <- merge(est_sf_Oz, y_oz[, c("V1", "V2")], by.x = "AQSID", by.y = "V1")
datosO_sf_wgs84$Ozono <- as.numeric(datosO_sf_wgs84$V2)
palO <- colorNumeric(palette = "viridis", domain = datosO_sf_wgs84$Ozono)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
# Contorno de California
addPolygons(data = sh_mundos_wgs84, fill = FALSE, color = "black", weight = 2) %>%
# Puntos de temperatura
addCircleMarkers(data = datosO_sf_wgs84,
fillColor = ~palO(Ozono),
fillOpacity = 0.8,
color = "black",
weight = 1,
radius = 6,
popup = ~paste("Ozono:", Ozono, "°C")) %>%
addLegend(pal = palO, values = datosO_sf_wgs84$Ozono, title = "Ozono (ppb)")
ozone <- as.geodata(datosOZ)
summary(ozone)
# Chunk 3
par(mfrow=c(1,2))
plot(Ozono~Este, data = datosOZ, ylab = "Ozono", xlab="Este")
plot(Ozono~Norte, data = datosOZ, ylab = "Ozono", xlab="Norte")
# Chunk 4
plot(ozone, qt.col = c("purple",
"pink",
"green",
"yellow"),
scatter3d=T)
# Chunk 5
fitO <- lm(Ozono~poly(Norte,3), data = datosOZ)
summary(fitO)
# Chunk 6
datosOZ$Residuos <- fitO$residuals
par(mfrow=c(1,2))
plot(Residuos~Este, data = datosOZ, xlab="Este", ylab="Residuos")
plot(Residuos~Norte, data = datosOZ, xlab="Norte", ylab="Residuos")
# Chunk 7
plot(ozone, qt.col = c("purple",
"pink",
"green",
"yellow"),
scatter3d=T, trend = ~ poly(Norte,3))
vg_O <- variog(ozone,estimator.type = "modulus", pairs.min=50) #Sin tendencia espacial
vg1_O <- variog(ozone, trend = ~poly(Norte,3), estimator.type = "modulus", pairs.min=50)
par(mfrow=c(1,2))
plot(Ozono~Este, data = datosOZ, ylab = "Ozono", xlab="Este")
plot(Ozono~Norte, data = datosOZ, ylab = "Ozono", xlab="Norte")
summar(lm(Ozono~poly(Norte,3)*Este, data = datosOZ) )
summary(lm(Ozono~poly(Norte,3)*Este, data = datosOZ) )
summary(lm(Ozono~Norte*Este, data = datosOZ) )
summary(fitO)
summary(lm(Ozono~poly(Norte,3)+Este, data = datosOZ) )
summary(lm(Ozono~I(Norte^2)+Este, data = datosOZ) )
summary(lm(Ozono~I(Norte^3)+Este, data = datosOZ) )
summary(lm(Ozono~Norte+Este, data = datosOZ) )
summary(lm(Ozono~Este, data = datosOZ) )
cor(datosOZ)
summary(lm(Ozono~Norte+Este, data = datosOZ) )
variog(ozone, trend = ~Este)
plot(variog(ozone, trend = ~Este))
summary(lm(Ozono~I(Norte^2)+I(Norte^3)+Este, data = datosOZ) )
variog(ozone, trend = ~I(Norte^2)+I(Norte^3)+Este)
plot(variog(ozone, trend = ~I(Norte^2)+I(Norte^3)+Este))
par(mfrow=c(1,1))
plot(variog(ozone, trend = ~I(Norte^2)+I(Norte^3)+Este))
plot(variog(ozone, trend = ~I(Norte^2)+I(Norte^3)+Este), estimator.type="modulus")
plot(variog(ozone, trend = ~I(Norte^2)+I(Norte^3)+Este, estimator.type="modulus"))
plot(variog(ozone, trend = ~I(Norte^2)+I(Norte^3)+Este, estimator.type="modulus", pairs.min = 50))
par(mfrow=c(1,2))
plot(variog(ozone, trend = ~I(Norte^2)+I(Norte^3)+Este, estimator.type="modulus", pairs.min = 50))
plot(vg1_O)
plot(variog(ozone, trend = ~I(Norte^2)+I(Norte^3)+Este, estimator.type="modulus", pairs.min = 50, max.dist = 4e5))
summary(lm(Ozono~I(Norte^2)+I(Norte^3)+Este+I(Este^2), data = datosOZ) )
summary(lm(Ozono~I(Norte^2)+I(Norte^3)+Este+Este*Norte, data = datosOZ) )
summary(lm(Ozono~I(Norte^2)+I(Norte^3)+Este*Norte+I(Este^2)-Este-Norte, data = datosOZ) )
summary(lm(Ozono~I(Norte^2)+I(Norte^3)-Este+Este*Norte-Norte, data = datosOZ) )
summary(lm(Ozono~I(Norte^2)+I(Norte^3)+Este, data = datosOZ) )
sqrt(10)
library(gamls)
library(gamlss)
??gamm
library(mgcv)
vg_O <- variog(ozone,estimator.type = "modulus", pairs.min=50) #Sin tendencia espacial
vg1_O <- variog(ozone, trend = ~I(Norte^2)+I(Norte^3)+Este, estimator.type = "modulus", pairs.min=50)
eyefit(vg1_O)
fitvar4_mat_O <- likfit(ozone,
coords = ozone$coords,
data = ozone$data,
trend = ~ I(Norte^2) + I(Norte^3) + Este,
ini.cov.pars = ini1_mat_O,
fix.nugget = F,
nugget = nugget_0_mO,
cov.model = "matern",
lik.method = "ML")
sigma_0_mO <- 17.0
phi_0_mO <- 440676.0
nugget_0_mO <- 5
kappa_0_mO <- 0.5
ini1_mat_O <- c(sigma_0_mO, phi_0_mO)
fitvar4_mat_O <- likfit(ozone,
coords = ozone$coords,
data = ozone$data,
trend = ~ I(Norte^2) + I(Norte^3) + Este,
ini.cov.pars = ini1_mat_O,
fix.nugget = F,
nugget = nugget_0_mO,
cov.model = "matern",
lik.method = "ML")
vg1_O
?vgm
sigma_0_gO <- 17.5
phi_0_gO <- 803585.6
nugget_0_gO <- 9
ini1_g_O <- c(sigma_0_gO, phi_0_gO)
fitvar3_g_O <- variofit(vg1_O,
cov.model = "gneiting",
ini1_g_O,
fix.nugget = F,
nugget = nugget_0_gO,
wei = "cressie")
fitvar3_g_O
fitvar3_g_O$cov.pars
fitvar3_g_O$cov.pars[1]
fitvar3_g_O$nugget
best_model_O <- gstat::vgm(psill = fitvar3_g_O$cov.pars[1],
model = "Gne",
range = fitvar3_g_O$cov.pars[2],
nugget = fitvar3_g_O$nugget
)
best_model_O <- gstat::vgm(psill = fitvar3_g_O$cov.pars[1],
model = "gneiting",
range = fitvar3_g_O$cov.pars[2],
nugget = fitvar3_g_O$nugget
)
fitvar3_mat_O <- variofit(vg1_O,
cov.model = "matern",
ini1_mat_O,
fix.nugget = F,
nugget = nugget_0_mO,
kappa = kappa_0_mO,
wei = "cressie")
fitvar3_mat_O
fitvar3_mat_O$kappa
eyefit(vg1_O)
eyefit(vg1_O)
?variofit
